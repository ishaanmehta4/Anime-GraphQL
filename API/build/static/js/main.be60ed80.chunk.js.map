{"version":3,"sources":["components/Navbar/index.js","components/FieldList/index.js","components/QueryStringBox/index.js","components/QueryResultBox/index.js","components/MainGrid/index.js","components/Footer/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navbar","id","href","target","FieldList","queryType","className","anime","character","map","field","QueryStringBox","rootState","setRootState","TextareaAutosize","value","queryString","onChange","event","placeholder","API_BASE_URL","process","client","ApolloClient","uri","cache","InMemoryCache","QueryResultBox","useState","loading","data","error","state","setState","execQuery","a","query","gql","then","result","catch","err","errors","console","log","useEffect","color","Fab","onClick","CircularProgress","Object","keys","length","class","DEFAULT_QUERY","MainGrid","document","querySelector","focus","ripple","background","opacity","outDuration","Footer","appTheme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","App","ThemeProvider","theme","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be60ed80.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.scss'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <div id=\"navbar\">\r\n            <h1>Anime<span>GQL</span></h1>\r\n            <a href=\"https://github.com/ishaanmehta4/Anime-GraphQL\" target=\"_blank\">View on Github</a> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\r\nimport './index.scss';\r\n\r\nfunction FieldList({ queryType }) {\r\n  let fieldList = {\r\n    anime: ['name', 'plot', 'profileUrl', 'image', 'characters (with all fields available in character query)', 'characterNames'],\r\n    character: ['name', 'bio', 'profileUrl', 'image', 'thumbnail', 'id', 'wealth', 'anime (with all fields available in anime query)', 'mediatype', 'voicedby', 'tags', 'birthday', 'sign', 'height', 'uploadedby'],\r\n  };\r\n\r\n  return (\r\n\r\n    <ul className=\"field-list\">\r\n      {fieldList[queryType].map(field => (\r\n        <li> {field} </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default FieldList;\r\n","import React from 'react';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport './index.scss';\r\n\r\nfunction QueryStringBox({rootState, setRootState}) {\r\n\r\n  return (\r\n    <div id=\"query-string-box\">\r\n      <TextareaAutosize \r\n        value={rootState.queryString} \r\n        onChange={(event) => {\r\n            setRootState({\r\n                ...rootState,\r\n                queryString: event.target.value\r\n            })\r\n        }}\r\n        placeholder=\"Enter query to execute\" \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QueryStringBox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './index.scss';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PlayArrowRoundedIcon from '@material-ui/icons/PlayArrowRounded';\r\nimport JSONPretty from 'react-json-pretty';\r\nimport './react-json-pretty-custom.css';\r\n\r\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client';\r\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';\r\n\r\nconst client = new ApolloClient({\r\n  uri: `${API_BASE_URL}/graphql`,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction QueryResultBox({ queryString }) {\r\n  let [state, setState] = useState({\r\n    loading: false,\r\n    data: '',\r\n    error: 'noerr',\r\n  });\r\n\r\n  useEffect(() => {\r\n    execQuery();\r\n  }, []);\r\n\r\n  async function execQuery() {\r\n    setState({\r\n      data: {},\r\n      loading: true,\r\n    });\r\n\r\n    try {\r\n      client\r\n        .query({\r\n          query: gql`\r\n            ${queryString}\r\n          `,\r\n        })\r\n        .then(result => {\r\n          setState({\r\n            data: result.data,\r\n            loading: false,\r\n          });\r\n        })\r\n        .catch(err => {\r\n          setState({\r\n            data: { errors: err },\r\n            loading: false,\r\n          });\r\n        });\r\n    } catch (err) {\r\n      console.log('error', err.result);\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"query-result-box\">\r\n      <div id=\"query-result-box__play-button\" color=\"primary\">\r\n        <Fab onClick={execQuery} color=\"primary\" aria-label=\"add\">\r\n          <PlayArrowRoundedIcon />\r\n        </Fab>\r\n      </div>\r\n      {state.loading && (\r\n        <div id=\"query-result-box__loader__wrapper\">\r\n          <CircularProgress color=\"secondary\" />\r\n        </div>\r\n      )}\r\n      {(Object.keys(state.data).length != 0) && (\r\n        <div class=\"query-result-box__result-wrapper\">\r\n          <JSONPretty id=\"json-pretty\" data={state.data}></JSONPretty>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QueryResultBox;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ripple from 'ripple-effects'\r\nimport './index.scss';\r\n\r\nimport FieldList from \"../FieldList\";\r\nimport QueryStringBox from \"../QueryStringBox\";\r\nimport QueryResultBox from \"../QueryResultBox\";\r\n\r\nconst DEFAULT_QUERY = {\r\n  anime: \r\n `{\r\n    anime(name: \"My hero academia\") {\r\n        name\r\n        plot\r\n        image\r\n        characters {\r\n          name\r\n          bio\r\n          image\r\n        }\r\n    }\r\n}`,\r\n  character:\r\n `{\r\n    character(name: \"All might\") {\r\n      name\r\n      bio\r\n      birthday\r\n      image\r\n      height\r\n      anime {\r\n        name\r\n        plot\r\n        image\r\n      }\r\n      voicedby\r\n      tags\r\n    }\r\n}`,\r\n};\r\n\r\nfunction MainGrid() {\r\n  let [rootState, setRootState] = useState({\r\n    queryType: 'character',\r\n    queryString: DEFAULT_QUERY.character,\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.querySelector('textarea').focus()\r\n  }, [rootState.queryType])\r\n\r\n  useEffect(() => {\r\n    // ripple(button.current)\r\n    // or\r\n    ripple('.section1__option', {\r\n      background: 'rgb(0, 170, 91)',\r\n      opacity: '0.2',\r\n      outDuration: 500,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"main-grid\">\r\n      {/* COLUMN 1 */}\r\n      <div>\r\n        <div className=\"section__header\">Choose query</div>\r\n        <div\r\n          onClick={() => {\r\n            setRootState({ ...rootState, queryType: 'character' , queryString: DEFAULT_QUERY.character});\r\n          }}\r\n          className={`section1__option ${rootState.queryType == 'character' && 'section1__option--active'}`}\r\n          >\r\n          Character\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            setRootState({ ...rootState, queryType: 'anime', queryString: DEFAULT_QUERY.anime });\r\n          }}\r\n          className={`section1__option ${rootState.queryType == 'anime' && 'section1__option--active'}`}\r\n        >\r\n          Anime\r\n        </div>\r\n      </div>\r\n\r\n      {/* COLUMN 2 */}\r\n      <div>\r\n        <div className=\"section__header\">Available fields</div>\r\n        <FieldList queryType={rootState.queryType} />\r\n      </div>\r\n\r\n      {/* COLUMN 3 */}\r\n      <div>\r\n        <div className=\"section__header\">GraphQL query string</div>\r\n        <QueryStringBox rootState={rootState} setRootState={setRootState}/>\r\n      </div>\r\n\r\n      {/* COLUMN 4 */}\r\n      <div>\r\n        <div className=\"section__header\">Query results</div>\r\n        <QueryResultBox queryString={rootState.queryString} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainGrid;\r\n","import React from 'react';\r\nimport './index.scss';\r\n\r\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div id=\"footer\">\r\n      <div>\r\n        <h3>API endpoints</h3>\r\n        <div>\r\n          GRAPHQL: <a className=\"no-decoration\">{`${API_BASE_URL}/graphql`}</a>\r\n        </div>\r\n        <div>\r\n          REST: GET <a className=\"no-decoration\">{`${API_BASE_URL}/rest/character/:character_name`}</a>\r\n        </div>\r\n        <div>\r\n          Example: <a className=\"no-decoration\" href={`${API_BASE_URL}/rest/character/all+might`} target='_blank'>{`${API_BASE_URL}/rest/character/all+might`}</a>\r\n        </div>\r\n        <div>\r\n          REST: GET <a className=\"no-decoration\">{`${API_BASE_URL}/rest/anime/:anime_name`}</a>\r\n        </div>\r\n        <div>\r\n          Example: <a className=\"no-decoration\" href={`${API_BASE_URL}/rest/anime/my+hero+academia`} target='_blank'>{`${API_BASE_URL}/rest/anime/my+hero+academia`}</a>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          All data fetched from <a href=\"http://www.animecharactersdatabase.com\">www.animecharactersdatabase.com</a>\r\n        </div>\r\n        <div>\r\n            Developed and maintained by <a href=\"https://www.instagram.com/1shaan_/\" target=\"_blank\">Ishaan Mehta</a>. <a href=\"https://www.linkedin.com/in/ishaanmehta4/\" target=\"_blank\">Get in touch.</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport MainGrid from './components/MainGrid';\nimport Footer from './components/Footer';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#00aa5b',\n      main: '#00aa5b',\n      dark: '#00aa5b',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#00aa5b',\n      main: '#00aa5b',\n      dark: '#00aa5b',\n      contrastText: '#000',\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={appTheme}>\n      <div className=\"App\">\n        <Navbar />\n        <h3 class=\"mobile_error\">Come back on a PC later to try out the queries.</h3>\n        <MainGrid />\n        <Footer />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}